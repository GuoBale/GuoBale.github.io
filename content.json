{"meta":{"title":"郭锦豪的主页","subtitle":null,"description":null,"author":"GuoJinhao","url":"http://guojinhao.com","root":"/"},"pages":[{"title":"about","date":"2019-04-03T13:06:47.000Z","updated":"2019-04-03T13:24:42.807Z","comments":true,"path":"about/index.html","permalink":"http://guojinhao.com/about/index.html","excerpt":"摘要： 学习","text":"摘要： 学习 正文： 这是我的博客： 欢迎您的来访!"},{"title":"categories","date":"2019-04-03T13:06:17.000Z","updated":"2019-04-03T13:10:13.703Z","comments":true,"path":"categories/index.html","permalink":"http://guojinhao.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-04-03T13:13:42.000Z","updated":"2019-04-03T13:14:28.532Z","comments":true,"path":"tags/index.html","permalink":"http://guojinhao.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"选择构造式超元启发式算法","slug":"Selection-Constructive-Hyper-Heuristics","date":"2019-04-07T01:43:10.000Z","updated":"2019-04-23T12:05:56.479Z","comments":true,"path":"2019/04/07/Selection-Constructive-Hyper-Heuristics/","link":"","permalink":"http://guojinhao.com/2019/04/07/Selection-Constructive-Hyper-Heuristics/","excerpt":"","text":"选择构造式超元启发式算法（简记为SCHH）：每一个解都是通过选择一个底层的元启发式算法计算得到的。这类超元启发式算法主要的技术有：基于案例选择、局部搜索、群体算法、自适应算法、杂交方法。 底层构造性元启发式算法（简记为LLCH）是用于构造问题的全部解或初始解。解决一个问题是从初始情况开始，然后经过一系列不同的状态直到终止状态或者得到满足要求的解。一个SCHH会选择LLCH用于目前问题状态然后得到问题的下一个状态，这些LLCH是依赖于具体问题的。下面给出SCHH的定义。 定义: 给定一个问题p和由一些LLCH构成的集合 L={L0,L1,⋯ ,Ln}L=\\{L_0,L_1,\\cdots,L_n\\}L={L0​,L1​,⋯,Ln​} 首先选择一些LLCH来构造问题p的一个解s，从这个初始状态出发，不断从L中选择LLCH作用于当前的状态, 得到问题的下一个状态，一直到终止状态。 我们有不同的策略用于选择LLCH，例如：基于实例、局部搜索、群体算法、交叉算法、自适应方法等。 SCHH伪代码 procedure SCHH(p,L) initialize solution s to be empty repeat use technique T to select a LLCH $L_i$ from $L$ apply $L_i$ to extend the solution $s$ until solution $s$ is completely constructed return $s$ end procedure 基于实例（Case-Based Reasoning）","categories":[{"name":"组合优化","slug":"组合优化","permalink":"http://guojinhao.com/categories/组合优化/"}],"tags":[{"name":"超元启发式算法","slug":"超元启发式算法","permalink":"http://guojinhao.com/tags/超元启发式算法/"},{"name":"组合优化","slug":"组合优化","permalink":"http://guojinhao.com/tags/组合优化/"}]},{"title":"超元启发式算法","slug":"Hyper-heuristics","date":"2019-04-06T01:43:10.000Z","updated":"2019-04-07T07:16:42.799Z","comments":true,"path":"2019/04/06/Hyper-heuristics/","link":"","permalink":"http://guojinhao.com/2019/04/06/Hyper-heuristics/","excerpt":"","text":"超元启发式算法提供了某种高层策略（High-Level Strategy，HLS），通过操纵或管理一组低层启发式算法（Low-Level Heuristics, LLH），以获得新的启发式算法。这些新启发式算法则被运用于求解各类NP-难解问题。 底层元启发式算法 超元启发式算法是通过操作底层元启发式算法来构造新的解或提高解的质量，操作可以是选择原有的底层元启发式算法，也可以是构造新的元启发式算法。底层元启发式算法分为两种：构造式和摄动式。构造式是可以根据问题直接得到解的。摄动式是指需要输入初始解，算法根据初始解得到新的解。我们通常根据不同类别的问题来设计底层元启发式算法。通常我们用构造式元启发式算法来生成问题的初始解，初始解作为优化问题的开始。在群体算法中（例如，遗传算法），我们可以利用底层元启发式算法去生成初始种群，这样比随机生成的种群质量会好很多，有利于算法的收敛。摄动式算法通常用来提高现有解的质量，通常是在原来解的附近进行搜索，由于摄动式算法的机制是进行局部搜索，所以摄动式算法是独立于具体问题的。 超元启发式算法分类 超元启发式算法的操作是选择现有的底层元启发式算法或者生成新的元启发式算法，而底层元启发式算法又分为构造式和摄动式的，我们把超元启发式算法分为选择构造式、选择摄动式、生成构造式、生成摄动式。 选择构造式超元启发式算法：每一个解都是通过选择一个底层的元启发式算法计算得到的。这类超元启发式算法主要的技术有：基于案例选择、局部搜索、群体算法、自适应算法、杂交方法。 选择摄动式超元启发式算法：对于现有的解选择摄动式元启发式算法来计算得到新的解，每一次选择可以是选择一个底层算法或者是多个。如果是只选择一个底层算法，那么超元启发式算法可以分为两部分，首先是选择一个底层的摄动式元启发式算法，通过算法得到新的解，然后判断新的解是否比原来的解优，从而判断是否选择这一个摄动式元启发式算法。如果是选择多个底层算法，我们可以利用群体算法去搜索底层元启发算法空间，这里我们的底层算法选择和解的优化在群体算法中一起进行了。 生成构造式超元启发式算法：对于不同的问题生成新的底层构造式元启发式算法。生成的元启发式算法是用来生成初始解的，后面会用其他方法去优化这些初始解。新的构造式元启发式算法的包括：现有的底层元启发式算法、元启发式算法的成分、问题的特征。这些成分由算术操作和条件操作组合在一起。 生成摄动式超元启发式算法：对不同的问题生成新的底层摄动式元启发式算法。新的摄动式元启发式算法的包括：现有的底层元启发式算法、元启发式算法的成分、问题的特征。这些成分由算术操作和条件操作组合在一起。","categories":[{"name":"组合优化","slug":"组合优化","permalink":"http://guojinhao.com/categories/组合优化/"}],"tags":[{"name":"超元启发式算法","slug":"超元启发式算法","permalink":"http://guojinhao.com/tags/超元启发式算法/"},{"name":"组合优化","slug":"组合优化","permalink":"http://guojinhao.com/tags/组合优化/"}]},{"title":"元启发式算法","slug":"meta-heuristic algorithms","date":"2019-04-03T18:11:25.884Z","updated":"2019-04-03T18:11:25.884Z","comments":true,"path":"2019/04/04/meta-heuristic algorithms/","link":"","permalink":"http://guojinhao.com/2019/04/04/meta-heuristic algorithms/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post $ hexo new \"My New Post\" More info: Writing Run server $ hexo server More info: Server Generate static files $ hexo generate More info: Generating Deploy to remote sites $ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"组合优化","slug":"组合优化","permalink":"http://guojinhao.com/tags/组合优化/"}]}]}